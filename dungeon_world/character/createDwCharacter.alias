embed
<drac2>
failure_title = "OOPS :("
parsing_failure_message = """im sorry you appear to be missing some variables or they are improperly formatted. 
Please create a character with the following syntax noting that `name` is a string and all others are positive integers in range 1-18: 
```!createDwCharacter -name "<name>" -class <barbarian|bard|cleric|druid|fighter|ranger|paladin|theif|wizard> [-str <strength_score>|-wis <wisdom_score>|-int <intelligence_score>|-dex <dexterity_score>|-cha <charisma_score>|-con <constitution_score>|-xp <current_xp_level>|-level <current_character_level>|-color <hex_color_value>]```"""
failure_color = 'db0000'
class_bonuses = load_json(get_gvar('45f448b6-2c08-4fdc-8581-5c86615b4932'))
mod_evaluator = [-3,-3,-3,-3,-2,-2,-1,-1,-1,0,0,0,0,1,1,1,2,2,3]
args = argparse(&ARGS&)
name = args.last('name')
character_class = args.last('class')
if (name is not None) and (character_class is not None) and (character_class.lower() in class_bonuses.keys()): #name must be given, character_class must be given, character_class must be of standard type
	character_class = character_class.lower()
	character_varname = f"dw_character_{name.lower().replace(' ','_')}"
	#chack if character is already assigned
	character_stats = {
		"name": name,
		"class": character_class.lower(),
		"strength": int(args.last('str', default=1)),
		"dexterity": int(args.last('dex', default=1)),
		"constitution": int(args.last('con', default=1)),
		"intelligence": int(args.last('int', default=1)),
		"wisdom": int(args.last('wiz', default=1)),
		"charisma": int(args.last('cha', default=1)),
		"debilities":{"strength":False,"wisdom": False,"intelligence": False,"dexterity": False,"charisma": False,"constitution": False,},
		"armor": int(args.last('armour', default =0)),
		"hit_points": int(args.last('con', default=1)) + class_bonuses[character_class]['health'],
		"max_carry": int(args.last('str', default=1)) + class_bonuses[character_class]['load'],
		"xp": int(args.last('xp', default=0)),
		"level": int(args.last('level', default=1)),
		"color": args.last('color', default='c797fc')
	}
	message = f"""
**Base Stats**:
{"Strength": <12}: {character_stats['strength']} : {mod_evaluator[int(character_stats['strength'])]}
{"Dexterity": <12}: {character_stats['dexterity']} : {mod_evaluator[int(character_stats['dexterity'])]}
{"Constitution": <12}: {character_stats['constitution']} : {mod_evaluator[int(character_stats['constitution'])]}
{"Intelligence": <12}: {character_stats['intelligence']} : {mod_evaluator[int(character_stats['intelligence'])]}
{"Wisdom": <12}: {character_stats['wisdom']} : {mod_evaluator[int(character_stats['wisdom'])]}
{"Charisma": <12}: {character_stats['charisma']} : {mod_evaluator[int(character_stats['charisma'])]}
	"""
	title = f"Character **{name}** Sucessfully Created"
	color = character_stats['color']
	if not uvar_exists('dwCharacters'):
		dw_characters = {character_varname : character_stats}
		set_uvar('dwCharacters', dump_json(dw_characters))
	else:
		dwCharacters = load_json(get('dwCharacters'))
		if character_varname in dwCharacters.keys():
			title = failure_title
			message = """Looks like that character already exists.
			Characters can be modified by setting them as your active character using `!setCharacter` and then using `!setStat -[str|wi|int|dex|cha|con] <stat_score>`"""
			color = failure_color
		else:
			dwCharacters[character_varname] = character_stats
			set_uvar('dwCharacters',dump_json(dwCharacters))

	if not uvar_exists('activeDwCharacter'): #if the user does not have a set DW Character set this to be the active character, even if the character exists in dwCharacters
		set_uvar('activeDwCharacter', character_varname)
else:
	title = failure_title
	message = parsing_failure_message
	color = failure_color

</drac2>
-title "<title>"
-desc "<message>"
-color <color>
